// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Songs         Song[]    @relation("userSongs")
  Albums        Album[]   @relation("userAlbums")

  settings   Settings? @relation("userSettings", fields: [settingsId], references: [id])
  settingsId String?   @unique
}

model Song {
  id String @id @default(cuid())

  title    String
  duration String
  url      String
  urlId    String
  addedAt  DateTime
  cover    String?

  userId String
  User   User   @relation("userSongs", fields: [userId], references: [id])
}

model Album {
  id String @id @default(cuid())

  title       String
  description String
  cover       String?
  gradient    String
  userId      String
  albumSongs  AlbumSong[] @relation("albumSong")
  User        User        @relation("userAlbums", fields: [userId], references: [id])
}

model AlbumSong {
  id       String  @id @default(cuid())
  albumId  String
  title    String
  duration String
  cover    String?
  url      String
  urlId    String
  Album    Album   @relation("albumSong", fields: [albumId], references: [id])
}

model Settings {
  id String @id @default(cuid())

  themesSettingsId String         @unique
  themesSettings   ThemesSettings @relation("themesSettings", fields: [themesSettingsId], references: [id])

  user   User?   @relation("userSettings")
  userId String?
}

model ThemesSettings {
  id String @id @default(cuid())

  currentThemeId String       @unique
  currentTheme   CurrentTheme @relation("currentTheme", fields: [currentThemeId], references: [id])

  quickAccessThemes QuickAccessThemes[] @relation("quickAccessThemes")

  customThemes CustomThemes[] @relation("customThemes")

  settings Settings? @relation("themesSettings")
}

model CurrentTheme {
  id         String @id @default(cuid())
  background String
  widgets    String
  accent     String
  text       String

  themesSettings ThemesSettings? @relation("currentTheme")
}

model QuickAccessThemes {
  id         String @id @default(cuid())
  background String
  widgets    String
  accent     String
  text       String

  themesSettingsId String?
  themesSettings   ThemesSettings? @relation("quickAccessThemes", fields: [themesSettingsId], references: [id])
}

model CustomThemes {
  id         String @id @default(cuid())
  background String
  widgets    String
  accent     String
  text       String

  themesSettingsId String?
  themesSettings   ThemesSettings? @relation("customThemes", fields: [themesSettingsId], references: [id])
}
